use Phalcon\Http\Response,
    Phalcon\Http\Request,
    Phalcon\Mvc\Micro,
    Phalcon\Mvc\Model\Query,
    Phalcon\Db\Column,
    Phalcon\Mvc\Url;

$app = new Micro();

// Use Loader() to autoload our model
$loader = new \Phalcon\Loader();

$loader->registerDirs(array(
    __DIR__ . '/models/'
))->register();

$di = new \Phalcon\DI\FactoryDefault();

//Set up the database service
$di->set('db', function(){
    return new \Phalcon\Db\Adapter\Pdo\Mysql(array(
        "host" => "localhost",
        "username" => "genba_usr",
        "password" => "jw7MHkShEa",
        "dbname" => "genba_db"
    ));
});
$di->set('config', function() {
    return new \Phalcon\Config\Adapter\Ini("./config/config.ini");
});
//Create and bind the DI to the application
$app = new \Phalcon\Mvc\Micro($di);

//set error handler
set_error_handler("customError");

function customError($errno, $errstr,$errfile,$errline) {
  file_put_contents("logs/error.log", "\n"."Error:[$errno] $errstr $errfile $errline",FILE_APPEND);
  //echo "<b>Error:</b> [$errno] $errstr";
}

//http://54.165.134.62/api/user/sendMailToManager/
//http://genba.online/api/user/sendMailToManager/
$app->get('/user/sendMailToManager', function() use ($app){
      $response = new Response();
      try{
            $user_id = $app->request->get('user_id');
            $store_id = $app->request->get('store_id');
            $address_id = $app->request->get('address_id');
            $user = Users::findFirstById($user_id);
            if ($user) {
                  $cart= Cart::find([
                          '(user_id= :user_id: )',
                          'bind' => array('user_id' => $user_id)
                  ]);
                  $address = UserAddress::findFirstById($address_id);
                  $order_template = file_get_contents(template_path . 'user_order_receipt.volt');
                  $subtotal = 0;
                  foreach ($cart as $key => $item) {
                         $product = Products::findFirstById($item->product_id);
                         $order_items .= '<tr class=""><td class="" style="text-align:left;vertical-align:middle;border:1px solid #eee;font-family:\'Helvetica Neue\',Helvetica,Roboto,Arial,sans-serif;word-wrap:break-word;color:#737373;padding:12px">'.$product->product_title.'<br><small></small></td><td class="" style="text-align:left;vertical-align:middle;border:1px solid #eee;font-family:\'Helvetica Neue\',Helvetica,Roboto,Arial,sans-serif;color:#737373;padding:12px">'.$item->quantity.'</td><td class="" style="text-align:left;vertical-align:middle;border:1px solid #eee;font-family:\'Helvetica Neue\',Helvetica,Roboto,Arial,sans-serif;color:#737373;padding:12px"><span class=""><span class="">Q</span>'.($product->_sale_price * $item->quantity).'</span></td></tr>';
                         $subtotal += floatval($product->_sale_price * $item->quantity);
                  }

                  $order_template = str_replace('order_items', $order_items, $order_template);
                  $order_template = str_replace('order_subtotal', $subtotal, $order_template);
                  $order_template = str_replace('order_total', $subtotal, $order_template);
                  $customer_info = '<p><strong>Email:</strong> <span class="" style="color:#505050;font-family:&quot;Helvetica Neue&quot;,Helvetica,Roboto,Arial,sans-serif"><a href="mailto:nisha.gulhane@webgile.com" target="_blank">'.$user->email.'</a></span></p><p><strong>Tel:</strong> <span class="" style="color:#505050;font-family:&quot;Helvetica Neue&quot;,Helvetica,Roboto,Arial,sans-serif">'.$user->phone.'</span></p><div><h3 style="color:#557da1;display:block;font-family:&quot;Helvetica Neue&quot;,Helvetica,Roboto,Arial,sans-serif;font-size:16px;font-weight:bold;line-height:130%;margin:16px 0 8px;text-align:left">Billing address</h3><p class="" style="color:#505050;font-family:&quot;Helvetica Neue&quot;,Helvetica,Roboto,Arial,sans-serif;margin:0 0 16px">'.$user->first_name.' '.$user->last_name.'<br>'.$address->address.'<br>'.$address->city.'<br>'.$address->country.'</div>';
                  $order_template = str_replace('customer_info', $customer_info, $order_template);
                  $store = Stores::findFirstById($store_id);
                  $manager_ids= explode(',',$store->store_managers_id);
                  //print_r($manager_ids);exit;
                  //operator@genba.com 478
                  //storeman@dumb.com 476
                  //sneha@gmail.com 594
                  foreach ($manager_ids as $key => $id) {
                        $manager = Users::findFirstById($id);
                        $template=str_replace('email_placeholder', $manager->email, $order_template);
                        $subject = "Order not placed";
                        $mail_to_manager = sendmail($manager->email,$subject,$template);
                  }
                  return $response->setJsonContent(array('status' => true, 'message' => "Thanks, we'll call you in 1 minute"));
            }
            else{
                  return $response->setJsonContent(array('status' => false, 'message' => 'User not found'));
            }

      }catch(Exception $e){
            return $response->setJsonContent(array('status' => 'error', 'message' => $e->getMessage()));
      }

});
/************************list of  Operator orders Function************************/
$app->get('/operator/order_list', function() use ($app) {
      $start = microtime(true);
      $response = new Response();
      $ts = new DateTime();
      $today = $ts->format('Y-m-d');
      try{
            $operator_id=$app->request->get('operator_id');
            $operator_role=$app->request->get('operator_role');
            if ($operator_id==0) {
                  $response->setJsonContent(array('status' => false ,'message' => 'Operator id should not be zero'));
            }
            else{
                  if ($operator_role == "delivery_man") {
                        $order_list= Orders::find(array(
                              "(order_delivery_man_id= :id: AND date_format(order_expected_time,'%Y-%m-%d') >= :today: AND order_status NOT IN ({order_status:array})) ",
                              'bind' => array('id' => $operator_id,
                                      'order_status' => array('Trashed','Canceled',''),
                                      'today' => $today
                              )

                        ));
                  }
                  else if($operator_role == "store_manager"){
                        $store_sql="SELECT s.id from Stores s where FIND_IN_SET('".$operator_id."',s.store_managers_id)";
                        $product_sql = "SELECT p.id FROM Products p WHERE p.store_id IN (".$store_sql.")";
                        $items_sql = "SELECT DISTINCT ot.store_order_id FROM OrderItems ot WHERE ot.product_id IN (".$product_sql.")";
                        $order_sql = "SELECT * FROM Orders o WHERE o.id IN (".$items_sql.") AND DATE_FORMAT( o.order_expected_time,  '%Y-%m-%d' ) >= DATE_FORMAT( NOW( ) ,  '%Y-%m-%d' ) AND o.order_status NOT IN ('Trashed',  'Canceled')";
                        $order_list = $this->modelsManager->executeQuery($order_sql);
                  }
                  if ( $order_list== false ) {
                        $response->setJsonContent(array('status' => false, 'message' => "No order found for this operator"));
                  }
                  else{
                         $order_data = array();
                         $product_data = array();
                         foreach ($order_list as $key => $value) {
                               $order_data[$key]['order_id'] = $value->id;
                               $get_addresses = getUserAddress($value->order_user_address_id);
                               //$get_addresses= UserAddress::findFirstById($value->order_user_address_id);
                               $order_data[$key]['order_user_address'] = $get_addresses;
                               $product_list= OrderItems::find([
                                      '(store_order_id= :store_order_id:)',
                                      'bind' => array('store_order_id' => $value->id)
                               ]);
                               $order_data[$key]['order_status'] = $value->order_status;
                               $order_data[$key]['order_expected_time'] = $value->order_expected_time;
                               $order_data[$key]['order_placed_time'] = $value->order_placed_time;
                               $order_data[$key]['order_delivered_time'] = $value->order_delivered_time;
                         }//exit;
                         $response->setJsonContent(array('status' => true, 'operator_order_list' => $order_data, 'count' => count($order_data)));
                  }
            }
      }catch(Exception $e){
            $response->setJsonContent(array('status' => 'error', 'message' => $e->getMessage()));
      }
      //$total_time =  round(microtime(true) - $start_time) ;
      //echo ':'.round((microtime(true) - $start),3)."sec DT: ".date("D, d M y H:i:s O");
      return $response;
});
/***********************End list of Operator orders Function*************************/
