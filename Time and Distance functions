function secToHR($seconds) {
      $hours = floor($seconds / 3600);
      $minutes = floor(($seconds / 60) % 60);
      $seconds = $seconds % 60;
      return "$hours:$minutes:$seconds";
}
function convertFromMinutes($job_duration){
    $hours = (int)($job_duration / 60);
    $minutes = $job_duration - ($hours * 60);
    //$seconds = "00";
    //return "$hours:$minutes:$seconds";
    //return array("h: $hours", "m: $minutes");
    return array("h"=>$hours,"m"=>$minutes);
}
function deliverTimeWithin2hour($user_id, $expected_delivery_date, $delivery_zone_id){
      $date = new DateTime();
      $current_time = $date->format('Y-m-d H:i:s');
      $date->modify('+2 hours');
      $delay_time = $date->format('Y-m-d H:i:s');
      $expected_delivery_date = new DateTime($expected_delivery_date);
      $expected_date = $expected_delivery_date->format('Y-m-d H:i:s');

      if ($current_time < $expected_date && $expected_date < $delay_time) {
           return deliverTime($user_id, $delivery_zone_id);
      }
      else{
           return false;
      }
}
function isDeliveryBeforeMaxDays($expected_delivery_date, $store){
     $expected_delivery_date = new DateTime($expected_delivery_date);
     $expected_date = $expected_delivery_date->format('Y-m-d');
     $max_days = $store->store_preorder_max_days;
     $date = new DateTime();
     $current_date = $date->format('Y-m-d');//exit;
     $date->modify('+'.$max_days.' day');
     $delivery_date = $date->format('Y-m-d');//exit;
     if ($current_date <= $expected_date && $expected_date <= $delivery_date ) {
           return $delivery_date;
     }
     else{
           return false;
     }
}
function orderAfter3Days($expected_delivery_date){
     $expected_delivery_date = new DateTime($expected_delivery_date);
     $expected_date = $expected_delivery_date->format('Y-m-d');
     $date = new DateTime();
     $current_date = $date->format('Y-m-d');//exit;
     $date->modify('+3 day');
     $stock_replenish_date = $date->format('Y-m-d');//exit;
     if ($current_date < $expected_date && $expected_date >= $stock_replenish_date ) {
           return true;
     }
     else{
           return false;
     }
}
function validateDeliveryAddress($store_id, $address_id){
      $store = Stores::findFirstById($store_id);
      $address = UserAddress::findFirstById($address_id);
      $user_lng = $address->longitude;
      $user_lat = $address->latitude;
      $store_lng = $store->store_long;
      $store_lat = $store->store_lat;
      $store_da_id = $store->store_delivery_areas_ID;
      $store_da_ids = explode(",",$store_da_id);
      $polygon = array();
      foreach ($store_da_ids as $key => $value) {
           $area_address = StoresDeliveryAreas::findFirstByda_area_id($value);
           $area_type = $area_address->da_type;///exit;
           switch ($area_type) {
             case 'polygon':
                 $area_shape = $area_address->da_shape;
                 $area_lat_long =  json_decode($area_shape);
                 $poly  = array();
                 foreach ($area_lat_long as $k => $val) {
                      $poly['lat'][] = $val->lat;
                      $poly['lng'][] = $val->lng;
                 }//exit;
                 $polySides  =  count($poly['lat']); //how many corners the polygon has
                 $polyX    =  $poly['lat'];//horizontal coordinates of corners
                 $polyY    =  $poly['lng'];//vertical coordinates of corners
                 $x = $user_lat;
                 $y = $user_lng;
                 if (pointInPolygon($polySides,$polyX,$polyY,$user_lat,$user_lng)){
                       return $value;
                 }
                 else{
                       return false;
                 }
               break;
             default:
                 $area_radius = (float)$area_address->da_radius;///exit;
                 $expected_radius = pointInRadius($store_lat,$store_lng,$user_lat,$user_lng, 6371);
                 $point_in_radius = $area_radius > $expected_radius;
                 if ($point_in_radius)
                        return $value;
                  else
                    return false;
               break;
           }
      }
      exit;
}
function pointInPolygon($polySides, $polyX, $polyY, $x, $y) {
      $j = $polySides-1 ;
      $oddNodes = 0;
      for ($i=0; $i<$polySides; $i++) {
            if ($polyY[$i]<$y && $polyY[$j]>=$y ||  $polyY[$j]<$y && $polyY[$i]>=$y) {
                  if ($polyX[$i]+($y-$polyY[$i])/($polyY[$j]-$polyY[$i])*($polyX[$j]-$polyX[$i])<$x){
                        $oddNodes=!$oddNodes;
                  }
            }
            $j=$i;
     }
      return $oddNodes;
}
function pointInRadius($store_x, $store_y, $x, $y, $earthMeanRadius = 6371) {
      $deltaLatitude = deg2rad($x - $store_x);
      $deltaLongitude = deg2rad($y - $store_y);
      $a = sin($deltaLatitude / 2) * sin($deltaLatitude / 2) + cos(deg2rad($store_x)) * cos(deg2rad($x)) * sin($deltaLongitude / 2) * sin($deltaLongitude / 2);
      $c = 2 * atan2(sqrt($a), sqrt(1-$a));
      $radius = $earthMeanRadius * $c;
      return $radius;
}function curlGET($url,$param){
    global $app;
    $ch = curl_init();
    curl_setopt($ch, CURLOPT_URL,$app->config->site->url.$url.'?'.$param);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
    $response = curl_exec($ch);
    curl_close($ch);
    return $response;
}
function _getTemplate($name){
      global $app;
      $app->view->setRenderLevel(\Phalcon\Mvc\View::LEVEL_ACTION_VIEW);
      $template = $app->view->getRender('emailTemplates', $name, null, function($view) {
      $view->setRenderLevel(Phalcon\Mvc\View::LEVEL_MAIN_LAYOUT);
      $view->setRenderLevel(Phalcon\Mvc\View::LEVEL_ACTION_VIEW);
      });
      $app->view->disable();
      return $template;
}
function sendmail($to,$subject,$message){
       global $app;
       // "/var/www/html/app/views/frontend/emailTemplates/");
       require_once('/var/www/html/app/library/Mail/class.phpmailer.php');
       $Username= $app->config->mail->Username;
       $Password= $app->config->mail->Password;
                  $mail             = new PHPMailer();
                  $body             = $message;
                  $mail->IsSMTP();
                  //$mail->SMTPDebug  = 2;
                  $mail->SMTPAuth   = true;
                  $mail->Host       = "smtp.gmail.com";
                  $mail->Port       = 587;
                  $mail->Username   = "$Username";
                  $mail->Password   = "$Password";
                  $mail->SMTPSecure = 'tls';
                  $mail->SetFrom("$Username", "Genba");
                  $mail->Subject    = $subject;

                  $mail->MsgHTML($body);
                  $address = $to;
                  $mail->AddAddress($address);
                  /*if(!$mail->Send())
                    die("Message was not sent <br />PHPMailer Error: " . $mail->ErrorInfo);
                  else
                    echo "Message has been sent";*/
                  if(!$mail->Send()) {
                      return 0;
                  } else {
                        return 1;
                  }
}
function sendPushNotification($user_id, $message, $order_id){
      //$user = Users::findFirstById($user_id);
      $users = Users::find("id IN(".$user_id.")");
      foreach ($users as $key => $user) {
            $user_login = $user->username;
            $push = false;
            switch($user->app_type){
                  case "Android":
                        $token=$user->app_push_token;
                        $reg_ids_android= array();
                        $reg_ids_android[]=$token;
                        $push = sendAndroid_notification($reg_ids_android,$message,"Genba", $order_id);
                  break;
                  case "iOS":
                       $token=$user->app_push_token;
                       $reg_ids_ios= array();
                       $reg_ids_ios[]=$token;
                       $push = sendIOS_notification($reg_ids_ios,$message,"Genba", $order_id);
                  break;
            }
      }

      return $push;
}
function GetDrivingDistance($lat1, $lat2, $long1, $long2){
    $url = "https://maps.googleapis.com/maps/api/distancematrix/json?origins=".$lat1.",".$long1."&destinations=".$lat2.",".$long2."&mode=driving&key=AIzaSyDuwILvJhpuFtZ7mAS_a0pZEJWXlZTdzMk";
    $ch = curl_init();
    curl_setopt($ch, CURLOPT_URL, $url);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
    curl_setopt($ch, CURLOPT_PROXYPORT, 3128);
    curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 0);
    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0);
    $response = curl_exec($ch);
    curl_close($ch);
    //var_dump($response);
    $response_a = json_decode($response, true);
    $dist = $response_a['rows'][0]['elements'][0]['distance']['text'];
    $time = $response_a['rows'][0]['elements'][0]['duration']['text'];

    return array('distance' => $dist, 'time' => $time);
}
function sendAndroid_notification($registation_ids,$message,$title,$order_id) {
      try {
      //$config = $app->config;
      //$logger = new \Phalcon\Logger\Adapter\File("../api/logs/push/". date('Y-m-d').".log");

      $GOOGLE_API_KEY= GOOGLE_API_KEY;
      $fields = array(
          'registration_ids' => $registation_ids,
          'data' => array("message" => $message,'title'=>$title,'msgcnt'=>"1","content-available"=>1,"order_id"=>$order_id),
      );
      $headers = array(
          'Authorization: key=' .$GOOGLE_API_KEY,
          'Content-Type: application/json'
          //'Content-Type:application/x-www-form-urlencoded;charset=UTF-8'
      );
      // Open connection
      $ch = curl_init();

      // Set the url, number of POST vars, POST data
      curl_setopt($ch, CURLOPT_URL,'https://android.googleapis.com/gcm/send');

      curl_setopt($ch, CURLOPT_POST, true);
      curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);
      curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);

      // Disabling SSL Certificate support temporarly
      curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);

      curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($fields));
      //curl_setopt($ch, CURLOPT_POSTFIELDS, $fields);

      // Execute post
      $result = curl_exec($ch);
      $sPath = 'logs/push/android/' . date('Y-m-d') . 'android.log';
      // Close connection
      curl_close($ch);
      if($result){
        $push_logs = '################################################'.PHP_EOL.' : Push Notification Logs : '.PHP_EOL.'################################################'.PHP_EOL;
        $push_logs .= PHP_EOL.'Title : '.$title.PHP_EOL.'Message : '.$message.PHP_EOL.PHP_EOL;
        $push_logs .= $result.PHP_EOL;
        file_put_contents($sPath,"\n"."Notification response for order : ($order_id) : - " ."\n". $push_logs ,FILE_APPEND);
        //var_dump($result);
       // $logger->info($push_logs);
      }
      }catch(Exception $ex) {
            file_put_contents($sPath,"\n"."Notification response for order : ($order_id) : - " ."\n". $ex->getMessage() ,FILE_APPEND);
          //$logger->error($ex->getMessage());
          /*echo $ex->getMessage();
          exit();*/
      }
}
function sendIOS_notification($registation_ids,$message,$title,$order_id) {
      //$config = $app->config;
      //$logger = new \Phalcon\Logger\Adapter\File("../app/logs/push/". date('Y-m-d').".log");

      $passphrase = apn_passphrase;
      $apn_certificate =apn_certificate;
      $sPath = 'logs/push/iOS/' . date('Y-m-d') . 'iOS.log';
      $push_logs = '################################################'.PHP_EOL.' : Push Notification Logs : '.PHP_EOL.'################################################'.PHP_EOL;
      $push_logs .= PHP_EOL.'Title : '.$title.PHP_EOL.'Message : '.$message.PHP_EOL.PHP_EOL;
      if($apn_certificate == "" ||  $apn_certificate == null || $passphrase == "" || $passphrase == null) {
          $err_msg= 'Please fill the required setup notification details before sending push notification';
          file_put_contents($sPath,"\n"."Notification response for order : ($order_id) : - " ."\n". $err_msg ,FILE_APPEND);

          /*echo $err_msg;
          $logger->error($err_msg);*/
      }
     try {
          $ctx = stream_context_create();
          stream_context_set_option($ctx, 'ssl', 'local_cert', $apn_certificate);
          stream_context_set_option($ctx, 'ssl', 'passphrase', $passphrase);

          //Open a connection to the APNS server
          /*if($Push['apn_mode'] == 0 || $Push['apn_mode'] == "0") {
              $fp = stream_socket_client('ssl://gateway.sandbox.push.apple.com:2195', $err,$errstr, 60, STREAM_CLIENT_CONNECT|STREAM_CLIENT_PERSISTENT, $ctx);
          }
          else {*/
              $fp = stream_socket_client('ssl://gateway.push.apple.com:2195', $err,$errstr, 60, STREAM_CLIENT_CONNECT|STREAM_CLIENT_PERSISTENT, $ctx);
          /*}*/
          if (!$fp) {
            $err_msg = "Failed to connect APN Server. Incorrect passphrase or pem file:".$apn_certificate;
            file_put_contents($sPath,"\n"."Notification response for order : ($order_id) : - " ."\n". $err_msg ,FILE_APPEND);
              //$logger->error("Failed to connect APN Server. Incorrect passphrase or pem file:".$apn_certificate);
              //echo "Failed to connect APN Server. Incorrect passphrase or pem file:".$apn_certificate;
          }
          //Create the payload body
          $body['aps'] = array(
              'badge' => 1,
              'alert' => $message,
              'title' =>  $title,
              'content-available' => 1,
              'sound' => 'default.mp3',
              'order_id'=>$order_id
          );
          //Encode the payload as JSON
          $payload = json_encode($body);
          foreach($registation_ids as $PushId) {
              $deviceToken =  $PushId;
              $msg = chr(0) . pack('n', 32) . pack('H*', $deviceToken) . pack('n', strlen($payload)) . $payload;
              // Send it to the server
              $result = fwrite($fp, $msg, strlen($msg));
              $push_logs .= $result.PHP_EOL;
              file_put_contents($sPath,"\n"."Notification response for order : ($order_id) : - " ."\n". $push_logs ,FILE_APPEND);
          }
          //Close the connection to the server
          fclose($fp);
      }
      catch(Exception $ex) {
        file_put_contents($sPath,"\n"."Notification response for order : ($order_id) : - " ."\n". $ex->getMessage() ,FILE_APPEND);
          /*$logger->error($ex->getMessage());
          echo $ex->getMessage();
          exit();*/
      }
}
function setTimezone($store_id){
      $store = Stores::findFirstById($store_id);
      $country = Countries::findFirstById($store->store_country_id);
      $continent_name = "America";
      if ($country->name!="Guatemala") {
          date_default_timezone_set($continent_name.'/'.$country->name);
      }
      else{
          date_default_timezone_set('America/Guatemala');
          //date_default_timezone_set('Asia/Calcutta');
      }
}
